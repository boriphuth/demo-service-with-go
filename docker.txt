===== Step 1 : Working with command line =====
#Build binary
$docker container run --rm -p 8080:8080 -v $(pwd):/go/ -w /go golang:1.10.3-alpine3.7 go build -o main main

#Run binary with container
docker container run --rm -p 8080:8080 -v $(pwd):/go/ -w /go golang:1.10.3-alpine3.7 ./main

===== Step 2 : Working with Dockerfile =====
# Create file Dockerfile
FROM golang:1.10.3-alpine3.7
WORKDIR /go
COPY . /go
RUN go build -o main main
CMD ["/go/main"]

# Build new image with Dockerfile
$docker image build -t sample:0.1 .

# Run binary with container
$docker container run --rm -p 8080:8080 sample:0.1

===== Step 3 : Working with Dockerfile and multi-stage builds =====
# https://docs.docker.com/develop/develop-images/multistage-build/
# Create file Dockerfile2
FROM golang:1.10.3-alpine3.7 as builder
WORKDIR /go
COPY . /go
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app main

FROM scratch
WORKDIR /root/
COPY --from=builder /go/app .
CMD ["./app"]

# Build new image with Dockerfile
$docker image build -t sample:0.2 -f Dockerfile2 .

# Run binary with container
$docker container run --rm -p 8080:8080 sample:0.2

===== Step 4 : Working with docker-compose =====
# Create file docker-compose.yml
version: '3.3'

services:
   search:
     image: sample:0.2
     restart: always
     ports:
       - "8080:8080"

# Run binary with container
$docker-compose up -d
$docker-compose down
